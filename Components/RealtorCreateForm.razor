@using DataFolders.DTOs.RealtorFirmDTOs
@using Services
@inject NavigationManager NavigationManager
@inject IHttpClientFactory httpClientFactory



<EditForm Model="NewRealtor" method="post" OnValidSubmit="ShowCreateConfirmationModalAsync">
    <DataAnnotationsValidator />
    <h1>Sign up</h1>
    <hr />
    <div class="mb-3">
        <label for="FirstName" class="form-label">First name: </label>
        <InputText id="FirstName" @bind-Value="NewRealtor.FirstName" class="form-control" />
        <ValidationMessage For="() => NewRealtor.FirstName" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="LastName" class="form-label">Last name: </label>
        <InputText id="LastName" @bind-Value="NewRealtor.LastName" class="form-control" />
        <ValidationMessage For="() => NewRealtor.LastName" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="Email" class="form-label">Email: </label>
        <InputText id="Email" @bind-Value="NewRealtor.Email" class="form-control" />
        <ValidationMessage For="() => NewRealtor.Email" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="PhoneNumber" class="form-label">Phone: </label>
        <InputText id="PhoneNumber" @bind-Value="NewRealtor.PhoneNumber" class="form-control" />
        <ValidationMessage For="() => NewRealtor.PhoneNumber" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="ProfilePicture" class="form-label">Profile Picture: </label>
        <InputText id="ProfilePicture" @bind-Value="NewRealtor.ProfilePicture" class="form-control" />
        <ValidationMessage For="() => NewRealtor.ProfilePicture" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="RealtorFirmId" class="form-label">Employer: </label>
        <InputSelect id="RealtorFirmId" @bind-Value="NewRealtor.RealtorFirmId" class="form-control form-select">
            <option value="" disabled selected hidden>Select employer</option>
            @foreach (var firm in realtorFirms)
            {
                <option value="@firm.Id">@firm.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="() => NewRealtor.RealtorFirmId" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="Password" class="form-label">Password: </label>
        <InputText id="Password" type="password" @bind-Value="NewRealtor.Password" class="form-control" />
        <ValidationMessage For="() => NewRealtor.Password" class="text-danger" />
    </div>

    <div class="mb-3">
        <Button Type="ButtonType.Link" To="/realtor" Color="ButtonColor.Secondary"><Icon Name="IconName.ArrowReturnLeft" /> Back</Button>
        <Button Type="ButtonType.Submit" Color="ButtonColor.Primary"><Icon Name="IconName.ClipboardPlus" /> Submit</Button>
    </div>
</EditForm>



<Modal @ref="confirmationModalCreate" Title="Confirmation">
    <BodyTemplate>
        <p>Confirm to create realtor.</p>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Success" @onclick="() => CreateRealtorAsync(NewRealtor)">Confirm</Button>
        <Button Color="ButtonColor.Danger" @onclick="HideCreateConfirmationModalAsync">Cancel</Button>
    </FooterTemplate>
</Modal>

@code {
    public RealtorCreateDTO NewRealtor { get; set; } = new();

    List<RealtorFirmsForRealtorCreateDTO>? realtorFirms = new List<RealtorFirmsForRealtorCreateDTO>();

    private Modal? confirmationModalCreate;

    [Parameter]
    public EventCallback<RealtorCreateDTO> OnValidSubmit { get; set; }


    protected override async Task OnInitializedAsync()
    {
        realtorFirms = await httpClientFactory.CreateClient("ServerApi").GetFromJsonAsync
                                        <List<RealtorFirmsForRealtorCreateDTO>>
                                        ("https://localhost:7190/api/RealtorFirm")
                                        ?? new();

        if (!realtorFirms.Any())
            NavigationManager.NavigateTo("notfound");

        realtorFirms.AsQueryable();
        realtorFirms = realtorFirms.Where(rf => rf.Active is true).ToList();

    }

    private async Task CreateRealtorAsync(RealtorCreateDTO realtor)
    {
        if (realtor is null)
            NavigationManager.NavigateTo("notfound");

        await httpClientFactory.CreateClient("ServerApi").PostAsJsonAsync("https://localhost:7190/api/Realtor/register", realtor);
        await HideCreateConfirmationModalAsync();
        NavigationManager.NavigateTo("/realtor");
    }
    private async Task HideCreateConfirmationModalAsync()
    {
        await confirmationModalCreate.HideAsync();
    }

    private async Task ShowCreateConfirmationModalAsync()
    {
        await confirmationModalCreate.ShowAsync();
    }

    // private async Task HandleValidSubmit()
    // {
    //     // Invoke the event callback with the form data
    //     await OnValidSubmit.InvokeAsync(Realtor);
    // }
}
