@using Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


@{
    ///<summary>
    /// Author: Samed
    /// This component checks if a user is logged in and displays login link, alternatively user name and logout button
    ///</summary>
}

@* If a user is logged in, display user name and show logout button *@
@if(userName != null)
{
<AuthorizeView Roles="@SD.SuperAdminOrRealtor">
    <li class="nav-item">
        <NavLink class="nav-link" href="/realtor/details/{userId}">
            <span class="oi oi-plus" aria-hidden="true"></span> @userName
        </NavLink>
    </li>
    <li class="nav-item">
        <Button Type="ButtonType.Submit" Size="Size.ExtraSmall" Color="ButtonColor.Danger" @onclick="LogoutAsync" value="Logout">Logout</Button>
    </li>
</AuthorizeView>    
}
@* Else, show login link *@
else
{
    <li class="nav-item">
        <NavLink class="nav-link" href="/login">
            <span class="oi oi-plus" aria-hidden="true"></span> Login
        </NavLink>
    </li>
}


@code {
    // Variable to display name
    private string? userName;
    private string? userId;
    // User is logged in if the LoginChange event holds a name string
    private bool isLoggedIn => userName is not null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // Get current authentication state, calling built in method
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        // Retrieve user
        var user = authState.User;
        // Update the userName based on the initial authentication state
        userName = user.Identity?.IsAuthenticated == true ? user.Identity.Name : null;
        // TODO: userId = user.Claims.

        // Subscribe to authentication state changes
        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Subscribe to custom login change event
        AuthenticationService.LoginChange += OnLoginChange;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        // Update the userName based on the new authentication state
        userName = user.Identity?.IsAuthenticated == true ? user.Identity.Name : null;

        // Trigger a re-render
        StateHasChanged();
    }

    private void OnLoginChange(string? name)
    {
        userName = name;
        StateHasChanged();
    }

    private async Task LogoutAsync()
    {
        await AuthenticationService.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        AuthenticationService.LoginChange -= OnLoginChange;
    }
}
