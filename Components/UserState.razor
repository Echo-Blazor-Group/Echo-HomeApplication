@using Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


@{
    ///<summary>
    /// Author: Samed
    /// This component checks if a user is logged in and displays login link, alternatively user name and logout button
    ///</summary>
}

@* If a user is logged in, display user name and show logout button *@
@if(userName != null)
{
<AuthorizeView Roles="@SD.SuperAdminOrRealtor">
    <li class="nav-item">
            <NavLink class="nav-link p-2 mt-4 me-2" href="/realtor/details/{userId}">
            <span class="oi oi-plus" aria-hidden="true"></span> @userName
        </NavLink>
    </li>
        <li class="nav-item p-2 mt-3 me-2">
        <Button Type="ButtonType.Submit" Size="Size.ExtraSmall" Color="ButtonColor.Danger" @onclick="LogoutAsync" value="Logout">Logout</Button>
    </li>
</AuthorizeView>    
}
@* Else, show login link *@
else
{
    <li class="nav-item">
        <NavLink class="nav-link p-2 mt-4 me-2" href="/login">
            <span class="oi oi-plus" aria-hidden="true"></span> Login
        </NavLink>
    </li>
}


@code {
    // Variable to display name
    private string? userName;
    private string? userId;
    // User is logged in if the LoginChange event holds a name string
    private bool isLoggedIn => userName is not null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var authState = AuthStateProvider.GetAuthenticationStateAsync();
        
        // TODO: Get id from AuthStateProvider.
        // userId = ;
        // Subscribe to the LoginChange event in AuthService
        AuthenticationService.LoginChange += name =>
        {
            userName = name;
            StateHasChanged();
        };
    }

    private void OnLoginChange(string? name)
    {
        userName = name;
        StateHasChanged();
    }

    private async Task LogoutAsync()
    {
        await AuthenticationService.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }
}
