@page "/EstateDetails/{id:int}"
@using DTOs.EstateDtos
@using Echo_HemAPI.Data.Models.DTOs.PictureDtos
@using System.Net
@using Newtonsoft.Json

@inject IHttpClientFactory httpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider


@*author Gustaf*@

<PageTitle>Estates</PageTitle>

<h3>Estates</h3>

@if (_Estate.Id == 0)
{
    <img src="https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExOG9najZ5a243ZWZ2dmd3b281a2J0b2NtYmFudTd6NzA3eHRhMGt2eSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/aQPFxg6JQQoaOfBoui/giphy.gif" height="1000px" width=“2000px />
}
else
{
    <button class="btn btn-primary" @onclick="@(() => EstateNavigate())">Back</button>
    <table class="table">
        <thead>
            <tr>
                @* <th>Id</th> *@
                <th>Address</th>
                <th>Starting Price</th>
                <th>Living Area Kvm</th>
                <th>Number Of Rooms</th>
                <th>BiArea Kvm</th>
                <th>Estate Area Kvm</th>
                <th>Monthly Fee</th>
                <th>Running Costs</th>
                <th>Construction Date</th>
                @* <th>Estate Description</th> *@
                <th>Publish Date</th>
                <th>County</th>
                <th>Category</th>
                <th>Realtor</th>
            </tr>
            <tr>
                @* <td>@estate.Id</td> *@
                <td>@_Estate.Address</td>
                <td>@_Estate.StartingPrice</td>
                <td>@_Estate.LivingAreaKvm</td>
                <td>@_Estate.NumberOfRooms</td>
                <td>@_Estate.BiAreaKvm</td>
                <td>@_Estate.EstateAreaKvm</td>
                <td>@_Estate.MonthlyFee</td>
                <td>@_Estate.RunningCosts</td>
                <td>@_Estate.ConstructionDate</td>
                @* <td>@_Estate.EstateDescription</td> *@
                <td>@_Estate.PublishDate</td>
                <td>@_Estate?.County?.CountyName</td>
                <td>@_Estate?.Category?.EstateCategory</td>
                <td>@_Estate?.Realtor?.FirstName @_Estate?.Realtor?.LastName</td>

                <AuthorizeView Roles="@SD.SuperAdminOrRealtor">
                    @if (idFromClaim == _Estate.Realtor.Id || roleFromClaim == SD.SuperAdmin)
                    {
                        <td><button class="btn btn-primary" @onclick="@(() => EstateEdit(@_Estate.Id))">Edit</button></td>
                        @if (_Estate.OnTheMarket == false)
                        {
                            <td><button class="btn btn-primary" @onclick="@(() => Remove())">Return</button></td>
                        }
                        else
                        {
                            <td><button class="btn btn-primary" @onclick="@(() => Remove())">Remove</button></td>
                        }
                        <td><button class="btn btn-primary" @onclick="@(() => ShowAddPicture(_Estate.Id))">Add Image</button></td>
                    }
                </AuthorizeView>
            </tr>
            <tr>
                <th>Estate Description</th>
            </tr>
            <p width="200px">@_Estate.EstateDescription</p>
        </thead>

    </table>
    @if (WishToRemoveFromMarket == true)
    {
    <EditForm Model="_Estate" OnSubmit="RemoveEstateFromMarket">
        <div id="MarketControl">
            <InputCheckbox hidden id="RemoveFromMarket" @bind-Value="_Estate.OnTheMarket" class="form-check" />
        </div>
        @if (_Estate.OnTheMarket == true)
        {
            <div>
                <button type="submit" class="btn btn-primary">Remove From Market</button>
                <button class="btn btn-primary" @onclick="@(() => Remove())">Don´t remove</button>
            </div>
        }
        else
        {
            <div>
                <button type="submit" class="btn btn-primary">Return To Market</button>
                <button class="btn btn-primary" @onclick="@(() => Remove())">Don´t Return to market</button>
            </div>
        }
    </EditForm>
    }

     @if (WishToEditImages == true)
     {
    <td><button Class="btn btn-primary" @onclick="@(() => DeleteAsync(_Picture.Id))">Delete</button></td>
    <EditForm Model="_Picture" OnSubmit="EditImage">
        <div id="EditImage">
            <label onformchange="PictureUrl"> Url </label>
            <InputText id="PictureUrl" @bind-Value="_Picture.PictureUrl" class="form-control" />
        </div>
        <div>
            <InputNumber hidden id="EstateId" @bind-Value="_Picture.EstateId" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>
    <p></p>
    <div>
        <img src="@_Picture.PictureUrl" width="800px" />
    </div>
    }
    @if (WishToAddImages == true)
    {
    <EditForm Model="_PictureInsert" OnSubmit="AddPicture">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div id="AddImage">
            <label onformchange="PictureUrl"> Url </label>
            <InputText id="PictureUrl" @bind-Value="_PictureInsert.PictureUrl" class="form-control" />
        </div>
        <div>
            <label onformchange="Id"></label>
            <InputNumber hidden @bind-Value="_PictureInsert.EstateId" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Add Image</button>
    </EditForm>
    <p></p>
    <div>
        <img src="@_PictureInsert.PictureUrl" width="400px" />
    </div>
    }
    
    <div class="row">
    @foreach (var estate in _Estate.Pictures)
    {
        <div class="col-md-4 mt-4">
            <Card class="mb-8 card col-md-4 mt-4" Style="width:26rem;">
                <img src="@estate.PictureUrl" />
                <CardBody>
                    <AuthorizeView Roles="@SD.SuperAdminOrRealtor">
                        @if (idFromClaim == _Estate.Realtor.Id || roleFromClaim == SD.SuperAdmin)
                        {
                            <button Class="btn btn-primary" @onclick="@(() => ShowEditImages(@estate.Id))">Edit Image</button>
                        }
                    </AuthorizeView>
                </CardBody>
            </Card>
        </div>
    }
    </div>
    
}
@code {
    [Parameter]
    public int? Id { get; set; }

    // placeholder="@Id"
    public int? PictureId { get; set; }

    [SupplyParameterFromForm]
    public PictureDto _Picture { get; set; } = new PictureDto();
    public InsertPictureDto _PictureInsert { get; set; } = new InsertPictureDto();
    public bool WishToRemoveFromMarket { get; set; }
    public bool WishToEditImages { get; set; }
    public bool WishToAddImages { get; set; }

    [SupplyParameterFromForm]
    public EstateDto _Estate { get; set; } = new EstateDto();

    private EditContext editContext;

    ClaimsPrincipal? claimsPrincipalUser;
    string? idFromClaim;
    string? roleFromClaim;


    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(500);

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        claimsPrincipalUser = authState.User;
        if (claimsPrincipalUser.Identity is not null)
        {
            var idClaim = claimsPrincipalUser.FindFirst(c => c.Type == "RealtorId");
            if (idClaim is not null)
            {
                idFromClaim = idClaim.Value;
            }
            var roleClaim = claimsPrincipalUser.FindFirst(c => c.Type == "role");
            if (roleClaim is not null)
            {
                roleFromClaim = roleClaim.Value;
            }
        }
        _PictureInsert.EstateId = Id ?? 0;

        if (Id is not null)
        {
            try
            {
                var result = await httpClientFactory.CreateClient("ServerApi").GetFromJsonAsync<EstateDto>($"https://localhost:7190/api/Estate/{Id}");
                if (result is not null)
                {
                    _Estate = result;
                }
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"Deserialization error: {ex.Message}");
            }
        }
    }
    async Task RemoveEstateFromMarket()
    {
        if (WishToRemoveFromMarket == true)
        {
            var result = await httpClientFactory.CreateClient("ServerApi").PatchAsJsonAsync($"https://localhost:7190/api/Estate/{Id}", _Estate);
            NavigationManager.NavigateTo("Estates");
        }
        else { WishToRemoveFromMarket = false; }

    }
    void EstateNavigate()
    {
        NavigationManager.NavigateTo("Estates");
    }
    async Task Remove()
    {
        //Simplified function provided by Sebbe!
        WishToRemoveFromMarket = !WishToRemoveFromMarket;
        WishToEditImages = false;
        WishToAddImages = false;
        //  if (WishToRemoveFromMarket == false) { WishToRemoveFromMarket = true; }
        // else { WishToRemoveFromMarket = false; }
    }

    //Methods for editing images
    async Task ShowEditImages(int id)
    {
        //if a picture edit button is clicked and its not the same picture that is already being edited, then switch or
        //just open that picture for editing instead.
        //otherwise just close the edit or open the edit.
        
        WishToEditImages = true;
        if (id == PictureId)
        {
            PictureId = -1;
            WishToEditImages = !WishToEditImages;
            WishToRemoveFromMarket = false;
            WishToAddImages = false;
        }
        else
        {
            PictureId = id;
            var pictures = await httpClientFactory.CreateClient("ServerApi").GetFromJsonAsync<PictureDto>($"https://localhost:7190/api/Pictures/{PictureId}");
            if (pictures is not null)
            {
                _Picture = pictures;
            }
        }
    }

    async Task EditImage()
    {
        if (WishToEditImages == true)
        {
            var result = await httpClientFactory.CreateClient("ServerApi").PatchAsJsonAsync($"https://localhost:7190/api/Pictures/{PictureId}",
            _Picture);

            NavigationManager.NavigateTo($"EstateDetails/{Id}", true);
        }
        else { WishToEditImages = false; }
    }

    async Task ShowAddPicture(int id)
    {
        WishToAddImages = !WishToAddImages;
        WishToRemoveFromMarket = false;
        WishToEditImages = false;
        _PictureInsert.EstateId = id;
    }
    async Task AddPicture()
    {
        var result = await httpClientFactory.CreateClient("ServerApi").PostAsJsonAsync($"https://localhost:7190/api/Pictures", _PictureInsert);
        NavigationManager.NavigateTo($"EstateDetails/{Id}", true);
    }

    void EstateEdit(int id)
    {
        NavigationManager.NavigateTo($"EstateEdit/{id}");
    }

    private async Task DeleteAsync(int id)
    {
        //stolen from samed, thank you samed
        HttpResponseMessage response = new();
        try
        {
            var result = await httpClientFactory.CreateClient("ServerApi").DeleteAsync($"https://localhost:7190/api/Pictures/{PictureId}");
            NavigationManager.NavigateTo($"EstateDetails/{Id}", true);
        }
        catch (WebException ex) when (response.StatusCode == HttpStatusCode.NotFound)
        {
            NavigationManager.NavigateTo("/notfound");
        }
        catch (WebException ex) when (response.StatusCode == HttpStatusCode.BadRequest)
        {
            // (Samed) Show toast message or Blazor Alert
            // ToastMessage badRequestMessage = new ToastMessage(ToastType.Danger, $"Realtor firm doesn't exist: {response.StatusCode}.");
            // ToastService.Notify(badRequestMessage);
        }
        catch (WebException ex) when (response.StatusCode == HttpStatusCode.InternalServerError)
        {
            // (Samed) Show toast message or Blazor Alert
        }
    }
}
